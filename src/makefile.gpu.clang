# OS Name (Linux or Darwin)
OSUPPER = $(shell uname -s 2>/dev/null | tr [:lower:] [:upper:])
OSLOWER = $(shell uname -s 2>/dev/null | tr [:upper:] [:lower:])

# Flags to detect 32-bit or 64-bit OS platform
OS_SIZE = $(shell uname -m | sed -e "s/i.86/32/" -e "s/x86_64/64/")
OS_ARCH = $(shell uname -m | sed -e "s/i386/i686/")

# These flags will override any settings
ifeq ($(i386),1)
	OS_SIZE = 32
	OS_ARCH = i686
endif

ifeq ($(x86_64),1)
	OS_SIZE = 64
	OS_ARCH = x86_64
endif

# Flags to detect either a Linux system (linux) or Mac OSX (darwin)
DARWIN = $(strip $(findstring DARWIN, $(OSUPPER)))

# change these variables when necessary
CUDA_PATH       ?= /usr/local/cuda
CUDA_INC_PATH   ?= $(CUDA_PATH)/include
CUDA_LIB_PATH   ?= $(CUDA_PATH)/lib
CUDA_BIN_PATH   ?= $(CUDA_PATH)/bin
	
NVCC            ?= $(CUDA_BIN_PATH)/nvcc
GCC             ?= g++

EXTRA_CCFLAGS   ?= 

# CUDA code generation flags
GENCODE_SM10    := -gencode arch=compute_10,code=sm_10
GENCODE_SM20    := -gencode arch=compute_20,code=sm_20
GENCODE_SM30    := -gencode arch=compute_30,code=sm_30
GENCODE_FLAGS   := $(GENCODE_SM10) $(GENCODE_SM20) $(GENCODE_SM30)

# OS-specific build flags
ifneq ($(DARWIN),) 
	  LDFLAGS   := -Xlinker -rpath $(CUDA_LIB_PATH) -L$(CUDA_LIB_PATH) -framework CUDA -lcudart
  	CCFLAGS   := -arch $(OS_ARCH) 
else
	ifeq ($(OS_SIZE),32)
	  LDFLAGS   := -L$(CUDA_LIB_PATH) -lcuda -lcudart 
	  CCFLAGS   := -m32
	else
	  LDFLAGS   := -L$(CUDA_LIB_PATH)64 -lcuda -lcudart 
  	  CCFLAGS   := -m64
	endif
endif

# OS-architecture specific flags
ifeq ($(OS_SIZE),32)
      NVCCFLAGS := -m32
else
	  NVCCFLAGS := -m64
endif
	
TARGET := release
	
# Common includes and paths for CUDA
INCLUDES      := -I$(CUDA_INC_PATH) -I. -I.. -I../../common/inc -I../../../shared/inc

# Target rules
all: build

build: FamSeqCuda

FamSeq.o: FamSeq.cpp
	$(GCC) $(CCFLAGS) $(EXTRA_CCFLAGS) $(INCLUDES) -o FamSeq.o -c FamSeq.cpp

normal.o: normal.cpp
	$(GCC) $(CCFLAGS) $(EXTRA_CCFLAGS) $(INCLUDES) -o normal.o -c normal.cpp

checkInput.o: checkInput.cpp
	$(GCC) $(CCFLAGS) $(EXTRA_CCFLAGS) $(INCLUDES) -o checkInput.o -c checkInput.cpp

file.o: file.cpp
	$(GCC) $(CCFLAGS) $(EXTRA_CCFLAGS) $(INCLUDES) -o file.o -c file.cpp

family.o: family.cu
	$(NVCC) $(NVCCFLAGS) $(GENCODE_FLAGS) $(EXTRA_CCFLAGS) $(INCLUDES) -ccbin=/usr/bin/clang -o family.o -c family.cu

FamSeqCuda: FamSeq.o normal.o checkInput.o file.o family.o
	$(GCC) $(CCFLAGS) -o $@ $+ $(EXTRA_CCFLAGS) $(LDFLAGS) 

clean:
	rm -f *.o 
